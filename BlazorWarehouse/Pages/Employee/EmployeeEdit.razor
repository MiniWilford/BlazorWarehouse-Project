@page "/EmployeeEdit/{EmployeeId:int?}"
@using WarehouseModels
@using Microsoft.AspNetCore.Components.Forms

@inject HttpClient http
@inject NavigationManager nav



<h3>EmployeeEdit</h3>

@if (Employee is null)
{
    <p>Loading Employee...</p>
}
else
{
    <div class="container">
        <div class="row">
            <EditForm Model="@Employee" OnSubmit="@HandleSubmit">
                <div class="form-floating my-2">
                    <InputText id="FirstName" name="FirstName" @bind-Value="Employee.FirstName" class="form-control" placeholder="x" required />
                    <label for="FirstName">First Name:</label>
                </div>
                <div class="form-floating my-2">
                    <InputText id="LastName" name="LastName" @bind-Value="Employee.LastName" class="form-control" placeholder="x" required />
                    <label for="LastName">Last Name:</label>
                </div>
                <div class="form-floating my-2">
                    <InputSelect id="Manager" name="Manager" @bind-Value="Employee.ManagerId" class="form-select" required>
                        @foreach (var manager in Managers)
                        {
                            <option value="@manager.ManagerId">@manager.FullName</option>
                        }
                    </InputSelect>
                    <label for="Manager">Manager: </label>
                </div>
                <div class="form-floating my-2">
                    <button class="btn btn-primary" type="submit">Edit</button>
                </div>
            </EditForm>
        </div>
        <div class="row">
            <div class="my-1">
                <a href="Employees">Back to List</a>
            </div>

        </div>

    </div>
}

@code {
    [Parameter]
    public int? EmployeeId { get; set; }

    public EmployeeViewModel? Employee { get; set; }

    public List<ManagerViewModel>? Managers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Employee = await http.GetFromJsonAsync<EmployeeViewModel>($"api/Employees/{EmployeeId}");

        try
        {
            Managers = await http.GetFromJsonAsync<List<ManagerViewModel>>("api/managers");
        }
        catch (Exception)
        {
        }

        await base.OnInitializedAsync();
    }

    protected async void HandleSubmit()
    {
        var result = await http.PutAsJsonAsync<EmployeeViewModel>($"api/Employees/{EmployeeId}", Employee!);

        //redirect to managers list on submit
        nav.NavigateTo("/Employees");
    }
}
