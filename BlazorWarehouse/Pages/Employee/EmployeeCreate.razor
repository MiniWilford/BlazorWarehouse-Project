@page "/EmployeeCreate"
@using Microsoft.AspNetCore.Components.Forms
@using WarehouseModels

@inject HttpClient http
@inject NavigationManager nav


<h3>Create Employee</h3>

@if (Managers is null)
{
    <div class="spinner-border m-5" role="status">
    </div>
} else
{
    <div class="container">
    <div class="row">
        <EditForm Model="@Employee" OnSubmit="@HandleSubmit">
            <div class="form-floating my-2">
                <InputText id="FirstName" name="FirstName" @bind-Value="Employee.FirstName" class="form-control" placeholder="x" />
                <label for="FirstName">First Name:</label>
            </div>
            <div class="form-floating my-2">
                <InputText id="LastName" name="LastName" @bind-Value="Employee.LastName" class="form-control" placeholder="x" />
                <label for="LastName">Last Name:</label>
            </div>
            <div class="form-floating my-2">
                <InputSelect id="Manager" name="Manager" @bind-Value="Employee.ManagerId" class="form-select">
                        @foreach (var manager in Managers)
                        {
                            <option value="@manager.ManagerId">@manager.FirstName</option>
                        }
                </InputSelect>
                <label for="Manager">Manager: </label>
            </div>

            <div class="form-floating my-2">

                <button class="btn btn-primary" type="submit">Create</button>
            </div>
        </EditForm>
    </div>
    <div class="row">
        <div class="my-1">
            <a href="Employees">Back to List</a>
        </div>
    </div>
</div>
}



@code {


    public EmployeeViewModel Employee { get; set; } = new EmployeeViewModel();

    public List<ManagerViewModel>? Managers { get; set; }

    protected async void HandleSubmit()
    {
        var result = await http.PostAsJsonAsync<EmployeeViewModel>($"api/Employees", Employee!);

        //redirect to managers list on submit
        nav.NavigateTo("/Employees");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Managers = await http.GetFromJsonAsync<List<ManagerViewModel>>("api/managers");
        }
        catch (Exception)
        {
        }

        await base.OnInitializedAsync();
    }
}
